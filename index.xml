<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shantanu Joshi</title>
    <link>http://joshishantanu.com/</link>
    <description>Recent content on Shantanu Joshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Jul 2016 20:48:25 -0700</lastBuildDate>
    <atom:link href="http://joshishantanu.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Successfully Avoiding the syslog Package</title>
      <link>http://joshishantanu.com/post/syslog/</link>
      <pubDate>Sat, 02 Jul 2016 20:48:25 -0700</pubDate>
      
      <guid>http://joshishantanu.com/post/syslog/</guid>
      <description>&lt;p&gt;I recently, needed to ship logs from a service written in Go to &lt;code&gt;Papertrail&lt;/code&gt;, our chosen log management tool.
This seemed straightforward, use the built in &lt;code&gt;syslog&lt;/code&gt; package to establish a connection to papertrail and use the &lt;code&gt;io.Writer&lt;/code&gt; it returns as the output in the &lt;code&gt;logger&lt;/code&gt;. This is where things got interesting.&lt;/p&gt;

&lt;p&gt;Before we go further, lets looks at what the above looks like in code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;log/syslog&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	sw, err := syslog.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;&amp;lt;host&amp;gt;.papertrailapp.com:&amp;lt;port&amp;quot;, 0, &amp;quot;tag&amp;quot;)
	if err == nil {
		// log to stderr and ship to papertrail
		log.SetOutput(io.MultiWriter(sw, os.Stderr))
	} else {
		log.Println(err)
	}
	// continue with logging as ussual ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surprisingly, the above program did not work. &lt;code&gt;syslog.Dial&lt;/code&gt; reported no errors, logs were output to &lt;code&gt;Stderr&lt;/code&gt;, but no logs showed up in papertrail.&lt;/p&gt;

&lt;p&gt;After some fiddling I decided to change the protocol to &lt;code&gt;udp&lt;/code&gt;. This worked without any problems. Okay, so now that I knew that the problem was somehow with the &lt;code&gt;tcp&lt;/code&gt; connection that made things a lot easiser. I quickly, realized that we had set papertrail to only accept tcp connections that are secured with &lt;code&gt;tls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Digging into the source for the &lt;code&gt;syslog&lt;/code&gt; pacakge I found that &lt;code&gt;syslog.Dial&lt;/code&gt; estabilishes a connetion with the remote syslog machine via &lt;code&gt;net.Dial&lt;/code&gt; and not &lt;code&gt;tls.Dial&lt;/code&gt;. Great!, this seems like an opportunity to fix the issue with an upstream patch right ? No! the syslog package is no longer under active developement :(&lt;/p&gt;

&lt;p&gt;My colleague pointed me to &lt;a href=&#34;https://github.com/RackSec/srslo://github.com/RackSec/srslog&#34;&gt;srslog&lt;/a&gt; which fixes exactly this issue. However, it seemed like a very large dependency to bring in just to ship logs to papertrail. By this point I had become familiar with the &lt;code&gt;syslog&lt;/code&gt; package and realized that essentially, we were establishing a connection and writing bytes to it. That seems easy ! Why did I need to bring in a large dependency to do that when I can just as easily do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
  sw, err := tls.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;&amp;lt;host&amp;gt;.papertrailapp.com:port&amp;quot;, nil)
	if err == nil {
		// log to stderr and ship to papertrail
		log.SetOutput(io.MultiWriter(sw, os.Stderr))
	} else {
		log.Println(err)
	}
	// continue with logging as ussual ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this worked for us because, we didn&amp;rsquo;t care about the log priority that you can provide into syslog package and the tag can easily be replaced by setting a &lt;code&gt;Prefix&lt;/code&gt; in the logger.&lt;/p&gt;

&lt;p&gt;The code ends up being simpler and avoids bringing in a large dependency.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Readings</title>
      <link>http://joshishantanu.com/reading/</link>
      <pubDate>Sat, 02 Jul 2016 20:26:56 -0700</pubDate>
      
      <guid>http://joshishantanu.com/reading/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;When Breath Becomes Air - &lt;a href=&#34;https://www.amazon.com/dp/B00XSSYR50/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1&#34;&gt;Paul Kalanithi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Sceptical Patriot - &lt;a href=&#34;https://www.amazon.com/Sceptical-Patriot-Exploring-Truths-Glories-ebook/dp/B00K35G7ZO/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1467516654&amp;amp;sr=1-1&amp;amp;keywords=The+Sceptical+patriot&#34;&gt;Sidin Vadukut&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Funny in Farsi - &lt;a href=&#34;https://www.amazon.com/Funny-Farsi-Growing-Iranian-America-ebook/dp/B000XU4UL2/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1467516716&amp;amp;sr=1-1&amp;amp;keywords=Funny+in+farsi&#34;&gt;Firoozeh Dumas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://joshishantanu.com/about/</link>
      <pubDate>Sat, 02 Jul 2016 19:57:58 -0700</pubDate>
      
      <guid>http://joshishantanu.com/about/</guid>
      <description>&lt;p&gt;I am currently a Software Engineer at &lt;a href=&#34;https://www.backplane.io/&#34;&gt;backplane.io&lt;/a&gt;, living in San Francisco, CA.&lt;/p&gt;

&lt;p&gt;I earned my Bachelors in Computer Engineering from Purdue Univeristy,West Lafayette IN. and my Masters in Computer Science from Stanford.&lt;/p&gt;

&lt;p&gt;My interests lie in the the areas of Distributed Systems, Programming Languages and Microcontrollers&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>