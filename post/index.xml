<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Shantanu Joshi</title>
    <link>http://joshishantanu.com/post/</link>
    <description>Recent content in Posts on Shantanu Joshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 May 2017 21:09:44 -0700</lastBuildDate>
    <atom:link href="http://joshishantanu.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TLS Handshake Timeouts in Go</title>
      <link>http://joshishantanu.com/post/timeout/</link>
      <pubDate>Fri, 26 May 2017 21:09:44 -0700</pubDate>
      
      <guid>http://joshishantanu.com/post/timeout/</guid>
      <description>

&lt;p&gt;I recently came across a situation where a Go program (built with go1.8.3) had spawned a lot more goroutines than required. Profiling revealed the cause to be go routines blocked on reading from a client while negotiating the TLS handshake. The goroutine stack trace led me to the following code segment in &lt;code&gt;crypto/tls&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// File: cryto/tls/conn.go
// Line: 589 (go1.8.3)

// Read header, payload.
// recordHeaderLen is a global variable set to 5
if err := b.readFromUntil(c.conn, recordHeaderLen); err != nil {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A server side goroutine could be stuck here for a long time if the client doesn&amp;rsquo;t write anything to the wire. Clearly, the fix is to set a &lt;code&gt;TLSHandshakeTimeout&lt;/code&gt; on  &lt;code&gt;http.Server&lt;/code&gt;. Just one problem, there&amp;rsquo;s no such setting.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http.Server&lt;/code&gt; exposes a &lt;code&gt;ReadTimeout&lt;/code&gt; and a &lt;code&gt;ReadHeaderTimeout&lt;/code&gt;. The latter applies only after a TLS handshake has been completed successfully and does not help our cause. The former, would definitely fix our problem, but it comes with a caveat. The entire request Body must be read within the &lt;code&gt;ReadTimeout&lt;/code&gt;, meaning we cannot stream large request bodies.&lt;/p&gt;

&lt;h2 id=&#34;indirect-tlshandshaketimeout&#34;&gt;Indirect TLSHandshakeTimeout&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;http.Server&lt;/code&gt; exposes a callback &lt;code&gt;ConnState&lt;/code&gt; which fits our needs perfectly, i:e allows us to terminate connections stuck during a TLS handshake but still support streaming large request bodies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;	// ConnState specifies an optional callback function that is
	// called when a client connection changes state. See the
	// ConnState type and associated constants for details.
	ConnState func(net.Conn, ConnState)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ConnState is called for the &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.8/src/net/http/server.go#L2667&#34;&gt;first&lt;/a&gt; time immediately after &lt;code&gt;Accept&lt;/code&gt;. The ConnState at this point is &lt;code&gt;StateNew&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.8/src/net/http/server.go#L1766&#34;&gt;next time&lt;/a&gt; it is called is when the server has read atleast one byte of the request. The ConnState is now &lt;code&gt;StateActive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inbetween these state transistions, the server has, if required, negotiated the TLS handshake. If a &lt;code&gt;ReadDeadline&lt;/code&gt; is set on the conn immediately after it enters &lt;code&gt;StateNew&lt;/code&gt; it is only overriden by the &lt;code&gt;ReadHeaderTimeout&lt;/code&gt; when the server attempts to &lt;a href=&#34;https://github.com/golang/go/blob/release-branch.go1.8/src/net/http/server.go#L915&#34;&gt;read the request&lt;/a&gt;. Thus, the only meaningful activity carried out the Server after setting the custom &lt;code&gt;ReadDeadline&lt;/code&gt; is the TLSHandshake. I&amp;rsquo;ve included the code for this below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var TLSHandshakeTimeout = 30 * time.Second // very generous timeout

s := &amp;amp;http.Server{
  ReadHeaderTimeout: 1 * time.Minute, 
  ConnState: func(conn net.Conn, cs ConnState){
    switch cs{
      case StateNew:
      conn.SetReadDeadline(time.Now().Add(TLSHandshakeTimeout))
      default:
      // NOTE: this is a good place to track connection level metrics :)
    }
  }, 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;Cloudflare has a great &lt;a href=&#34;https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/&#34;&gt;blog post&lt;/a&gt; on timeouts in http that I found very helpful while researching solutions for this problem.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Setup with Ocaml</title>
      <link>http://joshishantanu.com/post/ocaml/</link>
      <pubDate>Fri, 31 Mar 2017 21:05:39 -0700</pubDate>
      
      <guid>http://joshishantanu.com/post/ocaml/</guid>
      <description>

&lt;h2 id=&#34;prerequisite&#34;&gt;PreRequisite&lt;/h2&gt;

&lt;p&gt;This post assumes you have spacemacs already installed.&lt;/p&gt;

&lt;h2 id=&#34;install-ocaml&#34;&gt;Install Ocaml&lt;/h2&gt;

&lt;p&gt;Follow the installation &lt;a href=&#34;https://github.com/realworldocaml/book/wiki/Installation-Instructions&#34;&gt;instructions&lt;/a&gt; from &lt;code&gt;RealWorldOcaml&lt;/code&gt; till you hit the &lt;code&gt;Editors&lt;/code&gt; section&lt;/p&gt;

&lt;p&gt;After this step you should have a working installation of
* ocaml
* opam ( the package manager)
* merlin
* ocamllint
* utop&lt;/p&gt;

&lt;p&gt;The contents of &lt;code&gt;~/.ocamllint&lt;/code&gt; should be very close to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;## Setting up spacemacs
(* Added by OPAM. *)
let () =
  try Topdirs.dir_directory (Sys.getenv &amp;quot;OCAML_TOPLEVEL_PATH&amp;quot;)
  with Not_found -&amp;gt; ()
;;
(* Manually Added*)
#use &amp;quot;topfind&amp;quot;;;
#thread;;
#camlp4o;;
#require &amp;quot;core.top&amp;quot;;;
#require &amp;quot;core.syntax&amp;quot;;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;p&gt;Ensure there is a &lt;code&gt;.merlin&lt;/code&gt; file in the same directory as your &lt;code&gt;hello.ml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;The contents of the &lt;code&gt;.merlin&lt;/code&gt; file should be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PKG core lwt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;a href=&#34;https://github.com/ocaml/merlin/wiki/emacs-from-scratch#using-libraries&#34;&gt;doc&lt;/a&gt; explains why that statement is needed.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! now you can open spacemacs and enjoy a full featured IDE experience for ocaml.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing the uerrors package</title>
      <link>http://joshishantanu.com/post/uerrors/</link>
      <pubDate>Wed, 30 Nov 2016 21:25:19 -0800</pubDate>
      
      <guid>http://joshishantanu.com/post/uerrors/</guid>
      <description>

&lt;p&gt;Internal error messages are usually brief and in a format that is optimized for logging and searching.&lt;/p&gt;

&lt;p&gt;An example would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; error=true, service=phantom, txid=12345, msg=&amp;quot;user not authorized&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While that&amp;rsquo;s a great error message for developers to search by tags, its not a great error message to display to an end user.&lt;/p&gt;

&lt;p&gt;Usually, there&amp;rsquo;s a translation layer that would take this error message and then return a more user friendly message to the end user. It might look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;switch err:
  case ErrInvalidUser:
    umsg := &amp;quot;You are not authorized to perform this action&amp;quot;
  default: 
   umsg := err.Error()
// send umsg down in a response body along with an appropriate statsCode 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s often hard to find all the code paths and errors an API request could create and then individually, add them to a swtich statement.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;uerrors&lt;/code&gt; comes in. It offers an easy interface to attach a user-friendly message while creating the original error itself.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To create a New uerror&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
err := uerrors.New(&amp;quot;pkg: invalid token&amp;quot;, &amp;quot;Please renew your API token&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create an uerror with values available only at run time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
err := uerrors.FromErrors(fmt.Errorf(&amp;quot;pkg: txnid=%s, resource=%s&amp;quot;, txnid,resource), 
                          fmt.Errorf(&amp;quot;Your API request to %s failed. Please contact support if the issue persists&amp;quot;, resource)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;constructing-an-user-friendly-response&#34;&gt;Constructing an user friendly response:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/joshi4/uerrors&amp;quot;
)

func main() {
	http.HandleFunc(&amp;quot;/feature&amp;quot;, serveFeature)
	http.HandleFunc(&amp;quot;/&amp;quot;, serveIndex)
	http.ListenAndServe(&amp;quot;:6060&amp;quot;, nil)
}

func serveIndex(w http.ResponseWriter, req *http.Request) {
	uerr := uerrors.New(&amp;quot;example: redirect failed&amp;quot;, &amp;quot;Please visit http://localhost:6060/feature if you aren&#39;t redirected automatically&amp;quot;)
	log.Println(uerr.Error())
	io.WriteString(w, uerr.UserError())
}

func serveFeature(w http.ResponseWriter, req *http.Request) {
	path := req.URL.Path
	uerr := uerrors.FromErrors(fmt.Errorf(&amp;quot;example: error=true, endpoint=%s&amp;quot;, path),
		fmt.Errorf(&amp;quot;Please visit %s a little later&amp;quot;, path))
	log.Println(uerr.Error())
	io.WriteString(w, uerr.UserError())
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Successfully Avoiding the syslog Package</title>
      <link>http://joshishantanu.com/post/syslog/</link>
      <pubDate>Sat, 02 Jul 2016 20:48:25 -0700</pubDate>
      
      <guid>http://joshishantanu.com/post/syslog/</guid>
      <description>&lt;p&gt;I recently, needed to ship logs from a service written in Go to &lt;code&gt;Papertrail&lt;/code&gt;, our chosen log management tool.
This seemed straightforward, use the built in &lt;code&gt;syslog&lt;/code&gt; package to establish a connection to papertrail and use the &lt;code&gt;io.Writer&lt;/code&gt; it returns as the output in the &lt;code&gt;logger&lt;/code&gt;. This is where things got interesting.&lt;/p&gt;

&lt;p&gt;Before we go further, lets looks at what the above looks like in code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;log/syslog&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	sw, err := syslog.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;&amp;lt;host&amp;gt;.papertrailapp.com:&amp;lt;port&amp;quot;, 0, &amp;quot;tag&amp;quot;)
	if err == nil {
		// log to stderr and ship to papertrail
		log.SetOutput(io.MultiWriter(sw, os.Stderr))
	} else {
		log.Println(err)
	}
	// continue with logging as ussual ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Surprisingly, the above program did not work. &lt;code&gt;syslog.Dial&lt;/code&gt; reported no errors, logs were output to &lt;code&gt;Stderr&lt;/code&gt;, but no logs showed up in papertrail.&lt;/p&gt;

&lt;p&gt;After some fiddling I decided to change the protocol to &lt;code&gt;udp&lt;/code&gt;. This worked without any problems. Okay, so now that I knew that the problem was somehow with the &lt;code&gt;tcp&lt;/code&gt; connection that made things a lot easiser. I quickly, realized that we had set papertrail to only accept tcp connections that are secured with &lt;code&gt;tls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Digging into the source for the &lt;code&gt;syslog&lt;/code&gt; pacakge I found that &lt;code&gt;syslog.Dial&lt;/code&gt; estabilishes a connetion with the remote syslog machine via &lt;code&gt;net.Dial&lt;/code&gt; and not &lt;code&gt;tls.Dial&lt;/code&gt;. Great!, this seems like an opportunity to fix the issue with an upstream patch right ? No! the syslog package is no longer under active developement :(&lt;/p&gt;

&lt;p&gt;My colleague pointed me to &lt;a href=&#34;https://github.com/RackSec/srslo://github.com/RackSec/srslog&#34;&gt;srslog&lt;/a&gt; which fixes exactly this issue. However, it seemed like a very large dependency to bring in just to ship logs to papertrail. By this point I had become familiar with the &lt;code&gt;syslog&lt;/code&gt; package and realized that essentially, we were establishing a connection and writing bytes to it. That seems easy ! Why did I need to bring in a large dependency to do that when I can just as easily do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
  sw, err := tls.Dial(&amp;quot;tcp&amp;quot;, &amp;quot;&amp;lt;host&amp;gt;.papertrailapp.com:port&amp;quot;, nil)
	if err == nil {
		// log to stderr and ship to papertrail
		log.SetOutput(io.MultiWriter(sw, os.Stderr))
	} else {
		log.Println(err)
	}
	// continue with logging as ussual ....
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, this worked for us because, we didn&amp;rsquo;t care about the log priority that you can provide into syslog package and the tag can easily be replaced by setting a &lt;code&gt;Prefix&lt;/code&gt; in the logger.&lt;/p&gt;

&lt;p&gt;The code ends up being simpler and avoids bringing in a large dependency.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>