<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Errors on Shantanu Joshi</title>
    <link>http://joshishantanu.com/tags/errors/</link>
    <description>Recent content in Errors on Shantanu Joshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Nov 2016 21:25:19 -0800</lastBuildDate>
    <atom:link href="http://joshishantanu.com/tags/errors/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introducing the uerrors package</title>
      <link>http://joshishantanu.com/post/uerrors/</link>
      <pubDate>Wed, 30 Nov 2016 21:25:19 -0800</pubDate>
      
      <guid>http://joshishantanu.com/post/uerrors/</guid>
      <description>

&lt;p&gt;Internal error messages are usually brief and in a format that is optimized for logging and searching.&lt;/p&gt;

&lt;p&gt;An example would be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; error=true, service=phantom, txid=12345, msg=&amp;quot;user not authorized&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While that&amp;rsquo;s a great error message for developers to search by tags, its not a great error message to display to an end user.&lt;/p&gt;

&lt;p&gt;Usually, there&amp;rsquo;s a translation layer that would take this error message and then return a more user friendly message to the end user. It might look something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;switch err:
  case ErrInvalidUser:
    umsg := &amp;quot;You are not authorized to perform this action&amp;quot;
  default: 
   umsg := err.Error()
// send umsg down in a response body along with an appropriate statsCode 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s often hard to find all the code paths and errors an API request could create and then individually, add them to a swtich statement.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;uerrors&lt;/code&gt; comes in. It offers an easy interface to attach a user-friendly message while creating the original error itself.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To create a New uerror&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
err := uerrors.New(&amp;quot;pkg: invalid token&amp;quot;, &amp;quot;Please renew your API token&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create an uerror with values available only at run time:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;
err := uerrors.FromErrors(fmt.Errorf(&amp;quot;pkg: txnid=%s, resource=%s&amp;quot;, txnid,resource), 
                          fmt.Errorf(&amp;quot;Your API request to %s failed. Please contact support if the issue persists&amp;quot;, resource)) 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;constructing-an-user-friendly-response&#34;&gt;Constructing an user friendly response:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;io&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;net/http&amp;quot;

	&amp;quot;github.com/joshi4/uerrors&amp;quot;
)

func main() {
	http.HandleFunc(&amp;quot;/feature&amp;quot;, serveFeature)
	http.HandleFunc(&amp;quot;/&amp;quot;, serveIndex)
	http.ListenAndServe(&amp;quot;:6060&amp;quot;, nil)
}

func serveIndex(w http.ResponseWriter, req *http.Request) {
	uerr := uerrors.New(&amp;quot;example: redirect failed&amp;quot;, &amp;quot;Please visit http://localhost:6060/feature if you aren&#39;t redirected automatically&amp;quot;)
	log.Println(uerr.Error())
	io.WriteString(w, uerr.UserError())
}

func serveFeature(w http.ResponseWriter, req *http.Request) {
	path := req.URL.Path
	uerr := uerrors.FromErrors(fmt.Errorf(&amp;quot;example: error=true, endpoint=%s&amp;quot;, path),
		fmt.Errorf(&amp;quot;Please visit %s a little later&amp;quot;, path))
	log.Println(uerr.Error())
	io.WriteString(w, uerr.UserError())
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>