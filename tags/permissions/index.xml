<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Permissions on Shantanu Joshi</title>
    <link>http://joshishantanu.com:1313/tags/permissions/</link>
    <description>Recent content in Permissions on Shantanu Joshi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) Shantanu Joshi 2015. Powered by hugo and theme is nofancy</copyright>
    <lastBuildDate>Fri, 01 Aug 2014 04:21:23 +0000</lastBuildDate>
    <atom:link href="http://joshishantanu.com:1313/tags/permissions/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crypto Learnings</title>
      <link>http://joshishantanu.com:1313/post/cryptolearnings/</link>
      <pubDate>Fri, 01 Aug 2014 04:21:23 +0000</pubDate>
      
      <guid>http://joshishantanu.com:1313/post/cryptolearnings/</guid>
      <description>

&lt;p&gt;This past week, I had the opportunity to better understand some of the things that go on under the hood during an &lt;code&gt;ssh&lt;/code&gt; connection. Having never taken a crypto class at school, I started out with some background reading.&lt;/p&gt;

&lt;h3 id=&#34;background-reading:947559ee93dc20c540618e721986ce23&#34;&gt;Background Reading&lt;/h3&gt;

&lt;p&gt;I had heard a lot about &lt;a href=&#34;https://engineering.purdue.edu/kak/&#34;&gt;Prof. Avi Kak &lt;/a&gt; while at Purdue and this was a perfect opportunity for me to peruse his &lt;a href=&#34;https://engineering.purdue.edu/kak/compsec/Lectures.html&#34;&gt;amazing notes&lt;/a&gt; on computer security.&lt;/p&gt;

&lt;p&gt;The Lecture on Prime Numbers and Discrete Logs provided a great background for understanding the details of Public Key cryptography and RSA covered in the next lecture. Most of the material is self contained but I had to refer to an earlier lecture to refresh my memory of modular arithmetic. The lecture on Prime numbers starts with a discussion of &lt;code&gt;Fermat&#39;s Little Theorem&lt;/code&gt; and then we build on it further by studying about Euler&amp;rsquo;s totient function, which progresses naturally into a discussion about Euler&amp;rsquo;s Theorem which ends up being a generalized version of Fermat&amp;rsquo;s Little Theorem.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve all written a program to test the primality of a number when first learning how to program. More often than not it involves iterating over all numbers from 2 to sqrt(N). A number N can be reprsented in &lt;code&gt;log N&lt;/code&gt; bits and thus our algorithm is exponential in the number of bits required to reprsent N. Using the Theorems discussed above Miller and Rabin came up with the Miller-Rabin Algorithm  which is a probabilitic test for prime numbers. If their algorithm reports that a particular number is &lt;code&gt;NOT&lt;/code&gt; a prime then it is definitely not a prime, but since the test is probabilitic we may sometimes get false positives, i:e it may report a number to be prime when it is infact composite. One way to increase our confidence and make the probability of error negligble is to repeat the test for different values of the parameter and if the algorithm always reports the number to prime then we can be very sure of the result. This ability to quickly verify the primality of a  number (even very large ones ) is plays a key role in making public key cryptography possible.&lt;/p&gt;

&lt;p&gt;I have not gone into detail about any of the above three theorems as a thorough discussion of each would require their own blog post and even then, the notes linked to previously will definitely be a better source for acquiring a full understanding of these topics. Based on this, we can proceed to Lecture 12 which delves into the RSA Algorithm&lt;/p&gt;

&lt;h3 id=&#34;rsa-algorithm-for-public-key-cryptography:947559ee93dc20c540618e721986ce23&#34;&gt;RSA Algorithm for Public Key Cryptography&lt;/h3&gt;

&lt;h4 id=&#34;high-level-view:947559ee93dc20c540618e721986ce23&#34;&gt;High Level View&lt;/h4&gt;

&lt;p&gt;If &lt;strong&gt;A&lt;/strong&gt; and &lt;strong&gt;B&lt;/strong&gt; want to communicate securely and be assured of the identity of the other party then, both of them can make their Public Keys available to each other in any convenient manner. It is of no consequence who can see an individual&amp;rsquo;s public key. &lt;strong&gt;A&lt;/strong&gt; will encrypt any message he wants to send to &lt;strong&gt;B&lt;/strong&gt; using his &lt;code&gt;Private Key&lt;/code&gt; ( which is named so because you are not meant to share this with any one, the entire security of this method of encrypting and decrypting messages relies on keeping this key a secret from everyone else. ) When &lt;strong&gt;B&lt;/strong&gt; receives this encrypted message he can decrypt it using &lt;strong&gt;A&lt;/strong&gt;&amp;rsquo;s  Public Key. (It is safe to think of public and private key&amp;rsquo;s being inverses of each other). Thus, if &lt;strong&gt;B&lt;/strong&gt; is able to decrypt a message using A&amp;rsquo;s public key then B can be sure that the message originated from A as no else can have access to A&amp;rsquo;s private key. However, this solves only half the problem, any one with access to A&amp;rsquo;s public key can decrypt the encoded message by A.&lt;/p&gt;

&lt;p&gt;If we want to ensure that only B can decrypt a message encrypted by A we have to add an additional step. We first encrypt the message we want to send using B&amp;rsquo;s Public Key, the resulting message is then further encrypted using A&amp;rsquo;s private key. Thus now when B receives this twice encoded message, he/she will first use A&amp;rsquo;s Public Key to arrive at the first encrypted message which can be decoded to its orignal text using B&amp;rsquo;s private key. Since no one but B has access to B&amp;rsquo;s private key such a message provides but confidentiality and authentication. At this point you must be thinking &amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;how-exactly-do-we-come-up-with-these-public-and-private-keys:947559ee93dc20c540618e721986ce23&#34;&gt;How Exactly do we come up with these Public and Private Keys ?&lt;/h4&gt;

&lt;p&gt;Magic. I mean Maths.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first thing we need to do is come up with a large number, lets call it &lt;em&gt;N&lt;/em&gt;. However, &lt;em&gt;N&lt;/em&gt; can&amp;rsquo;t be just any large number, it must also be a product of two prime numbers, &lt;em&gt;p&lt;/em&gt; and &lt;em&gt;q&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Then, choose a number &lt;em&gt;e&lt;/em&gt; that is co-prime to the totient of &lt;em&gt;N&lt;/em&gt;. This guarantees that there exists &amp;hellip;

&lt;ul&gt;
&lt;li&gt;a number &lt;em&gt;d&lt;/em&gt; that is the multiplicative inverse of &lt;em&gt;e&lt;/em&gt; (under modulo phi(N), where phi(N) is the totient of N)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The Public key is {e, n}&lt;/li&gt;
&lt;li&gt;The Private key is {d, n}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These weird conditions on &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;e&lt;/em&gt; will soon become clear.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, lets assume we are trying to encrypt a number M. To do this we can use our private key and generate&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C = M ^ d (modulo N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;N
Now to decrypt it we need the corresponding Public Key. Mathematically it can be represented as :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M&#39; = C ^ e (modulo N)
=&amp;gt; M&#39; = M ^ de (modulo N)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would only work if &lt;code&gt;M&#39; = M&lt;/code&gt; and that means d and e need to be multiplicative inverses of each other.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Rivest, Shamir and Adleman were able to show that when N is the product of two primes, in arithmetic modulo N the exponents behave modulo phi(N).&lt;/em&gt; This guarantee along with the conditions placed on choosing &lt;em&gt;N&lt;/em&gt; and &lt;em&gt;e&lt;/em&gt; and &lt;em&gt;d&lt;/em&gt; ensure that M&amp;rsquo;= M.&lt;/p&gt;

&lt;p&gt;There are some best practices to follow when generating &lt;em&gt;p&lt;/em&gt;  and &lt;em&gt;q&lt;/em&gt; but essentially these are generated through a crytographically secure random number generator.&lt;/p&gt;

&lt;p&gt;As we have just seen RSA is an asymmetric cryptographic algorithm. It&amp;rsquo;s not well suited to encrypt a large amount of data but is indispenable in providing a safe environment in which to exchange session keys between the two participants after which we can shift over to a symmetric algorithm.&lt;/p&gt;

&lt;p&gt;Well enough theory for now, lets look at a case where this theory might be useful.&lt;/p&gt;

&lt;h3 id=&#34;applications-in-ssh:947559ee93dc20c540618e721986ce23&#34;&gt;Applications in SSH&lt;/h3&gt;

&lt;p&gt;How many times have we had to encounter the following prompt when &lt;em&gt;ssh-ing into a machine for the first time&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The authenticity of host &#39;hostname&#39; can&#39;t be established.
RSA key fingerprint is ff:ff:ff:ee:ff:aa:ff:ff:fe:ff:dd:ff:bb:bb:00:aa.
Are you sure you want to continue connecting (yes/no)? yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blindly agreeing to such a connection can be just as harmful as the &lt;em&gt;Terms Of Service&lt;/em&gt; that no one reads, but signs anyways. There&amp;rsquo;s not much we can do about the latter, but can we do something about the former ? To know the answer to that, we need to dig a little deeper.&lt;/p&gt;

&lt;p&gt;When we try and connect to a host and it presents us with its public key we can&amp;rsquo;t be sure that we are talking to the host we are trying to connect. Infact, blindly moving forward with the above prompt opens us to  a text-book &lt;code&gt;man in the middle attack&lt;/code&gt;. So the ideal solution would be that the server/host shows us something that we can trust but at the same time is safe for everyone to see.&lt;/p&gt;

&lt;h3 id=&#34;certificates:947559ee93dc20c540618e721986ce23&#34;&gt;Certificates&lt;/h3&gt;

&lt;p&gt;Certificates are the exact solution for this problem. Not everyone can issue a certificate, they are issued only by designated certifying authorites. A certifying authority (CA) has a set of Public and Private Keys that it uses to create these certificates. So if you wanted to make your website secure, you would go to a CA and ask for a certificate. A CA will then use its &lt;code&gt;Private Key&lt;/code&gt; to encode or &lt;code&gt;sign&lt;/code&gt; your content and thus create a certificate.&lt;/p&gt;

&lt;p&gt;Now, whenever, some one wants to visit your website you will first show them the shiny new certificate. The browser will look at the CA that issued this and check in the client&amp;rsquo;s local machine for the appropriate Public Key. How does one get this Public Key  you ask ? The answer is you don&amp;rsquo;t. The CA works in tandem with computer manufacturer&amp;rsquo;s ensuring that the machine ships with the required Public Keys.&lt;/p&gt;

&lt;p&gt;The most common instance of this is when your browser shows a green tab or a lock on your browser URL when you visit your bank&amp;rsquo;s website or facebook.com. Since the CA uses its Private Key no malicious entity can forge a certificate and these CA&amp;rsquo;s go to extra-oridnary lengths to ensure that their Private Key&amp;rsquo;s stay that way.&lt;/p&gt;

&lt;p&gt;So can any one be a CA ? Well yes and no. The crucial element that makes this system work is trust. Your browser/program needs to be configured to accept the certificates that are presented by the banks and/or popular websites.&lt;/p&gt;

&lt;p&gt;So you can generate your own key pairs and if you have the power to do so, configure some machines to trust certificates authored by you and voila you are now a CA as well. The next post will go into detail about how this can be implemented.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>